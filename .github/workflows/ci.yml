name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest  # Specifies the runner environment. Here, it's the latest Ubuntu.

    steps:
      - name: Checkout code  # Check out the repository content to the runner.
        uses: actions/checkout@v3

      - name: Set up Python 3.10  # Set up a Python environment using the version 3.10.
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install backend dependencies  # Install the required Python packages specified in the requirements.txt file.
        run: pip install -r Backend/requirements.txt

      - name: Check database service status  # Check if the PostgreSQL server is ready to accept connections.
        run: |
          if ! pg_isready -h ${{ secrets.POSTGRES_HOST }} -U ${{ secrets.POSTGRES_USER }}; then
            echo "Database service is not running. Attempting to restart..."
            sudo service postgresql restart  # Restart PostgreSQL service if not running. Adjust based on your CI environment.
          else
            echo "Database service is running."
          fi
        env:
          PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

      - name: Check Active Connections  # Display active connections to ensure the database can be connected securely.
        run: |
          psql -h ${{ secrets.POSTGRES_HOST }} -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DATABASE }} -c "SELECT pid, usename, state, query FROM pg_stat_activity WHERE datname = '${{ secrets.POSTGRES_DATABASE }}';" sslmode=require
        env:
          PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

      - name: Force Terminate All Connections to Database  # Forcefully terminate any active connections to allow test database recreation.
        run: |
          psql -h ${{ secrets.POSTGRES_HOST }} -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DATABASE }} -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '${{ secrets.POSTGRES_DATABASE }}' AND state = 'idle';" sslmode=require
        env:
          PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

      - name: Run backend tests for menu app  # Execute unit tests for the 'menu' application component.
        run: |
          cd Backend
          python manage.py test menu --noinput

      - name: Run backend tests for multimedia app  # Execute unit tests for the 'multimedia' application component.
        run: |
          cd Backend
          python manage.py test multimedia --noinput




  build-and-push-backend:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v3  # Checkout the repository content again for backend

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}  # Use DOCKER_HUB_USERNAME secret for Docker Hub login
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}  # Use DOCKER_HUB_ACCESS_TOKEN secret for Docker Hub password

      - name: Build and push Docker image for backend
        uses: docker/build-push-action@v4
        with:
          context: ./Backend
          file: ./Backend/Dockerfile
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:backend-latest
          push: true

  build-and-push-frontend:
    runs-on: ubuntu-latest
    needs: build-and-push-backend
    steps:
      - uses: actions/checkout@v3  # Checkout repository again for frontend

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image for frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:frontend-latest
          push: true
